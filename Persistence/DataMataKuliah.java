/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Persistence;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.*;
import java.awt.print.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.filechooser.FileSystemView;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.PersistenceException;
/**
 *
 * @author ISMAIL
 */
public class DataMataKuliah extends javax.swing.JFrame {

    Connection con;

    /**
     * Creates new form DataMataKuliah
     */
    public DataMataKuliah() {
        initComponents();
        showTable();
    }

    private static int masukkanData(Connection conn, String kode, String sks, String nama, String semester) throws SQLException {
        String sql = "INSERT INTO matakuliah (kodemk, sks, namamk, semesterajar) VALUES (?, ?, ?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, kode);
            ps.setString(2, sks);
            ps.setString(3, nama);
            ps.setString(4, semester);
            return ps.executeUpdate();
        }
    }


    private static void peringatan(String pesan) {
        JOptionPane.showMessageDialog(null, pesan);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtKodeMk = new javax.swing.JTextField();
        txtSks = new javax.swing.JTextField();
        txtNamaMk = new javax.swing.JTextField();
        txtSemesterAjar = new javax.swing.JTextField();
        btnInsert = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMK = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Data Mata Kuliah");

        jLabel2.setText("Kode MK");

        jLabel3.setText("SKS");

        jLabel4.setText("Nama MK");

        jLabel5.setText("Semester Ajar");

        txtNamaMk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNamaMkActionPerformed(evt);
            }
        });

        txtSemesterAjar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSemesterAjarActionPerformed(evt);
            }
        });

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        tblMK.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMKMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMK);

        jButton1.setText("Cetak");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Upload");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtSemesterAjar, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtNamaMk, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtSks, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(115, 115, 115)
                                    .addComponent(txtKodeMk, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnInsert)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtKodeMk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtSks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtNamaMk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtSemesterAjar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnInsert)
                            .addComponent(btnUpdate)
                            .addComponent(btnDelete)
                            .addComponent(jButton1)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNamaMkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNamaMkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNamaMkActionPerformed

    private void txtSemesterAjarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSemesterAjarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSemesterAjarActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        // TODO add your handling code here:
        // Inisialisasi EntityManagerFactory dan EntityManager
EntityManagerFactory emf = Persistence.createEntityManagerFactory("LatihanPersistencePU");
EntityManager em = emf.createEntityManager();

try {
    // Validasi input
    if (txtKodeMk.getText().isEmpty() || txtNamaMk.getText().isEmpty() || txtSks.getText().isEmpty() || txtSemesterAjar.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Isi Semua Kolom terlebih dahulu");
    } else {
        // Mulai transaksi
        em.getTransaction().begin();

        // Buat entitas Matakuliah baru dan set nilainya
        Matakuliah matakuliah = new Matakuliah();
        matakuliah.setKodemk(txtKodeMk.getText());
        matakuliah.setSks(txtSks.getText());
        matakuliah.setNamamk(txtNamaMk.getText());
        matakuliah.setSemesterajar(txtSemesterAjar.getText());

        // Persist entitas ke database
        em.persist(matakuliah);

        // Commit transaksi
        em.getTransaction().commit();

        JOptionPane.showMessageDialog(null, "Berhasil disimpan");
        
        // Refresh data pada tampilan
        showTable();
    }
} catch (Exception e) {
    // Rollback transaksi jika terjadi kesalahan
    if (em.getTransaction().isActive()) {
        em.getTransaction().rollback();
    }
    JOptionPane.showMessageDialog(null, "Gagal disimpan");
    System.out.println(e.getMessage());
} finally {
    em.close();  // Tutup EntityManager setelah operasi
}

// Kosongkan text field setelah penyimpanan
txtNamaMk.setText("");
txtKodeMk.setText("");
txtSks.setText("");
txtSemesterAjar.setText("");

    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        // Inisialisasi EntityManagerFactory dan EntityManager
EntityManagerFactory emf = Persistence.createEntityManagerFactory("LatihanPersistencePU");
EntityManager em = emf.createEntityManager();

try {
    // Validasi input
    if (txtKodeMk.getText().isEmpty() || txtNamaMk.getText().isEmpty() || txtSks.getText().isEmpty() || txtSemesterAjar.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Isi Semua Kolom terlebih dahulu");
    } else {
        // Mulai transaksi
        em.getTransaction().begin();

        // Cari entitas Matakuliah berdasarkan kode mata kuliah (assume KodeMK is primary key or unique)
        String kodeMK = txtKodeMk.getText();
        Matakuliah matakuliah = em.find(Matakuliah.class, kodeMK);

        if (matakuliah != null) {
            // Update nilai entitas Matakuliah yang ditemukan
            matakuliah.setNamamk(txtNamaMk.getText());
            matakuliah.setSks(txtSks.getText());
            matakuliah.setSemesterajar(txtSemesterAjar.getText());

            // Simpan perubahan (JPA otomatis mengelola update saat transaksi commit)
            em.getTransaction().commit();
            JOptionPane.showMessageDialog(null, "Data berhasil diperbarui");

            // Refresh data pada tampilan
            showTable();
        } else {
            JOptionPane.showMessageDialog(null, "Data tidak ditemukan untuk KodeMK: " + kodeMK);
            em.getTransaction().rollback();
        }
    }
} catch (Exception e) {
    // Rollback transaksi jika terjadi kesalahan
    if (em.getTransaction().isActive()) {
        em.getTransaction().rollback();
    }
    JOptionPane.showMessageDialog(null, "Gagal memperbarui data");
    System.out.println(e.getMessage());
} finally {
    em.close();  // Tutup EntityManager setelah operasi
}

// Kosongkan text field setelah update
txtNamaMk.setText("");
txtKodeMk.setText("");
txtSks.setText("");
txtSemesterAjar.setText("");

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        // Inisialisasi EntityManagerFactory dan EntityManager
EntityManagerFactory emf = Persistence.createEntityManagerFactory("LatihanPersistencePU");
EntityManager em = emf.createEntityManager();

try {
    // Validasi input
    if (txtKodeMk.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Masukkan Kode Mata Kuliah yang akan dihapus");
    } else {
        // Mulai transaksi
        em.getTransaction().begin();

        // Cari entitas Matakuliah berdasarkan kode mata kuliah
        String kodeMK = txtKodeMk.getText();
        Matakuliah matakuliah = em.find(Matakuliah.class, kodeMK);

        if (matakuliah != null) {
            // Hapus entitas jika ditemukan
            em.remove(matakuliah);

            // Commit transaksi
            em.getTransaction().commit();
            JOptionPane.showMessageDialog(null, "Data berhasil dihapus");

            // Refresh data pada tampilan
            showTable();
        } else {
            JOptionPane.showMessageDialog(null, "Data tidak ditemukan untuk KodeMK: " + kodeMK);
            em.getTransaction().rollback();
        }
    }
} catch (Exception e) {
    // Rollback transaksi jika terjadi kesalahan
    if (em.getTransaction().isActive()) {
        em.getTransaction().rollback();
    }
    JOptionPane.showMessageDialog(null, "Gagal menghapus data");
    System.out.println(e.getMessage());
} finally {
    em.close();  // Tutup EntityManager setelah operasi
}

// Kosongkan text field setelah penghapusan
txtKodeMk.setText("");
txtNamaMk.setText("");
txtSks.setText("");
txtSemesterAjar.setText("");

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblMKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMKMouseClicked
        // TODO add your handling code here:
        int row = tblMK.getSelectedRow();
        txtKodeMk.setText(tblMK.getValueAt(row, 0).toString());
        txtSks.setText(tblMK.getValueAt(row, 1).toString());
        txtNamaMk.setText(tblMK.getValueAt(row, 2).toString());
        txtSemesterAjar.setText(tblMK.getValueAt(row, 3).toString());
    }//GEN-LAST:event_tblMKMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/pbo", "postgres", "isma111004");

            JasperReport reports;
            String path = "src\\Persistence\\reportMK.jasper";
            reports = (JasperReport) JRLoader.loadObjectFromFile(path);
            JasperPrint print = JasperFillManager.fillReport(path, null, con);
            JasperViewer view = new JasperViewer(print, false);
            view.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            view.setVisible(true);
        } catch (JRException e) {
            System.out.println(e.getMessage());
        } catch (SQLException ex) {
            Logger.getLogger(DataMataKuliah.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         JFileChooser jfc = new JFileChooser();
        int returnValue = jfc.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = jfc.getSelectedFile();
            System.out.println("File yang dipilih: " + file.getAbsolutePath());

            // Membuka EntityManager untuk operasi database
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("LatihanPersistencePU");
            EntityManager em = emf.createEntityManager();

            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                String line;
                // Mulai transaksi
                em.getTransaction().begin();

                // Baca file baris per baris
                while ((line = br.readLine()) != null) {
                    String[] data = line.split(";");

                    // Pastikan data yang dibaca memiliki 4 kolom
                    if (data.length >= 4) {
                        String kode = data[0];
                        String sks = data[1];
                        String nama = data[2];
                        String semester = data[3];
                        showTable();
                        // Validasi data sebelum disimpan
                        if (!kode.isEmpty() && !sks.isEmpty() && !nama.isEmpty() && !semester.isEmpty()) {
                            // Membuat objek Matakuliah dan set data
                            Matakuliah matakuliah = new Matakuliah();
                            matakuliah.setKodemk(kode);
                            matakuliah.setSks(sks);
                            matakuliah.setNamamk(nama);
                            matakuliah.setSemesterajar(semester);
                            
                            // Persist entitas Matakuliah ke database
                            em.persist(matakuliah);
                        }
                    }
                }

                // Commit transaksi
                em.getTransaction().commit();

                // Menampilkan pesan sukses
                JOptionPane.showMessageDialog(null, "Data berhasil diupload");

                // Meng-refresh tampilan tabel atau data
                showTable();  // Pastikan Anda memiliki metode ini untuk memperbarui tampilan

            } catch (IOException | PersistenceException e) {
                // Rollback transaksi jika terjadi kesalahan
                if (em.getTransaction().isActive()) {
                    em.getTransaction().rollback();
                }
                JOptionPane.showMessageDialog(null, "Gagal mengupload data");
                Logger.getLogger(DataMataKuliah.class.getName()).log(Level.SEVERE, null, e);
            } finally {
                // Menutup EntityManager dan EntityManagerFactory setelah operasi selesai
                if (em.isOpen()) {
                    em.close();
                }
                emf.close();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    public void showTable() {
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("LatihanPersistencePU");
    EntityManager em = emf.createEntityManager();

    try {
        // Buat model tabel dengan kolom yang sesuai
        DefaultTableModel tbnmhs = new DefaultTableModel(new String[]{"KODE MK", "SKS", "NAMA MK", "SEMESTER AJAR"}, 0);

        // Menggunakan NamedQuery "Matakuliah.findAll" untuk mengambil semua data
        List<Matakuliah> mataKuliahList = em.createNamedQuery("Matakuliah.findAll", Matakuliah.class).getResultList();

        // Iterasi hasil query dan tambahkan baris ke model tabel
        for (Matakuliah matakuliah : mataKuliahList) {
            tbnmhs.addRow(new Object[]{
                matakuliah.getKodemk(),
                matakuliah.getSks(),
                matakuliah.getNamamk(),
                matakuliah.getSemesterajar()
            });
        }

        // Atur model tabel ke tabel GUI
        tblMK.setModel(tbnmhs);
    } catch (Exception ex) {
        Logger.getLogger(DataMataKuliah.class.getName()).log(Level.SEVERE, null, ex);
    } finally {
        em.close();  // Tutup EntityManager setelah selesai
    }
}



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataMataKuliah.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataMataKuliah.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataMataKuliah.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataMataKuliah.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataMataKuliah().setVisible(true);
            }
        });
    }
    DefaultTableModel tbnmhs;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblMK;
    private javax.swing.JTextField txtKodeMk;
    private javax.swing.JTextField txtNamaMk;
    private javax.swing.JTextField txtSemesterAjar;
    private javax.swing.JTextField txtSks;
    // End of variables declaration//GEN-END:variables
}
